@layout MainLayout
@page "/lobby"
@attribute [Authorize]

@inject IMultiplayerGameService Game
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

<div class="index-content">
    <div class="login">
        <div class="login-section">
            <form action="/api/account/login" method="get" autocomplete="off">
                <img src='@("/assets/images/png/logo.png")'>
                <div class="subtitle-container">
                    <h2 class="subtitle">Play the geek version of rock-paper-scissors.</h2>
                    <h2 class="subtitle">Share the link with your opponent</h2>
                </div>
                <input class="token-link" type="text" value="@TokenLink" readonly onclick="this.select();document.execCommand('copy');" />
                <h2 class="wait-text">@Status</h2>
                @if (Timeout)
                {
                    <div class="custom-button">
                        <a class="custom-button-link" href="/challenger">Play against bots</a>
                    </div>
                }
            </form>
        </div>
    </div>

    <div class="github">
        <a class="github-text" target="_blank" href="https://github.com/microsoft/RockPaperScissorsLizardSpock">Get the code from GitHub</a>
    </div>
</div>

@code
{
    public string Username { get; set; }
    private string Token { get; set; }
    private string TokenLink { get; set; }
    public bool Timeout { get; set; }
    public string Status { get; set; } = "creating link to share...";

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.AuthenticationType != "Twitter")
        {
            NavigationManager.NavigateTo("/challenger");
        }

        Username = state.User.Identity.Name;
        Timeout = false;
        _ = Game.FetchMatchId(Username, ProcessMatchId);
    }

    private void ProcessMatchId(string matchId, string status, string token)
    {
        if (!string.IsNullOrWhiteSpace(token))
        {
            Token = token;
            TokenLink = $"{NavigationManager.BaseUri}api/token/{token}";
            Status = GetStatusText("WaitingForPlayers");
        }

        if (!string.IsNullOrWhiteSpace(matchId))
        {
            NavigationManager.NavigateTo($"/battle/multiplayer/{matchId}");
            return;
        }

        Status = GetStatusText(status);
        Timeout = status == "Canceled";
        StateHasChanged();
    }

    private static string GetStatusText(string status)
    {
        return status switch
        {
            "Canceled" => "request cancelled",
            "Matched" => "starting match",
            "TokenCreated" => "share the link",
            _ when status.StartsWith("Waiting") => "waiting opponent to join...",
            _ => status
        };
    }
}