@layout MainLayout
@page "/lobby"
@attribute [Authorize]

@using Microsoft.Extensions.Options
@using System.Threading

@inject IGameService Game
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

<div class="index-content">
    <div class="login">
        <div class="login-section">
            <form action="/api/account/login" method="get" autocomplete="off">
                <img src='@("/assets/images/png/logo.png")'>
                <div class="subtitle-container">
                    <h2 class="subtitle">Play the geek version of rock-paper-scissors.</h2>
                    <h2 class="subtitle">Share the link with your opponent</h2>
                </div>
                <input class="token-link" type="text" value="@TokenLink" readonly onclick="this.select();document.execCommand('copy');" />
                @if (Timeout)
                {
                    <h2 class="wait-text">queue cancelled, nobody joined.</h2>
                    <div class="custom-button">
                        <a class="custom-button-link" href="/challenger">Play against bots</a>
                    </div>
                }
                else
                {
                    <h2 class="wait-text">waiting opponent to join...</h2>
                }
            </form>
        </div>
    </div>

    <div class="github">
        <a class="github-text" target="_blank" href="https://github.com/microsoft/RockPaperScissorsLizardSpock">Get the code from GitHub</a>
    </div>
</div>

@code
{
    private CancellationTokenSource _cancellationTokenSource;

    private string Token { get; set; }
    private string TokenLink { get; set; }
    public bool Timeout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.AuthenticationType != "Twitter")
        {
            NavigationManager.NavigateTo("/challenger");
        }

        _cancellationTokenSource = new CancellationTokenSource();
        var username = state.User.Identity.Name;
        Token = await Game.GetToken(username);
        TokenLink = $"{NavigationManager.BaseUri}api/token/{Token}";
        Timeout = false;

        _ = WaitForToken(_cancellationTokenSource.Token, username);
    }

    private async Task WaitForToken(CancellationToken cancellationToken, string username)
    {
        const int DelayWait = 2000;
        const int MaxAttempts = 120000 / DelayWait;
        int count = 0;
        while (cancellationToken.IsCancellationRequested && count++ < MaxAttempts)
        {
            await Task.Delay(DelayWait);
            var hasMatch = await Game.CheckToken(username);
            if (hasMatch)
            {
                NavigationManager.NavigateTo($"/battle?token={Token}");
            }

            Timeout = true;
        }
    }
}