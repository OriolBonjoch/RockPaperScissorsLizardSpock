@layout MainLayout
@page "/invite/{token}"

@inject IOptions<TwitterOptions> TwitterOptions
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMultiplayerGameService Game

<div class="index-content">
    <div class="login">
        <div class="login-section">
            <form action="/api/account/login" method="get" autocomplete="off">
                <img src='@("/assets/images/png/logo.png")'>
                <div class="subtitle-container">
                    <h2 class="subtitle">Your friend has invited you to play</h2>
                    <h2 class="subtitle">Rock, Paper, Scissors, Lizard, Spock!</h2>
                </div>

                <input type="hidden" name="redirectUrl" value="@RedirectUrl" />
                <input type="text" name="username" class="user" placeholder="Type Username" value="@Username" required />

                <div class="sign_twitter">
                    @if (!string.IsNullOrWhiteSpace(TwitterOptions?.Value?.ConsumerKey) &&
                     !string.IsNullOrWhiteSpace(TwitterOptions?.Value?.ConsumerSecret))
                    {
                        <span>or <a href="/api/account/login/twitter?redirectUrl=@RedirectUrl">Sign in with Twitter</a></span>
                    }
                </div>

                <div class="custom-button">
                    <button type="submit" class="custom-button-link">Enter</button>
                </div>
            </form>
        </div>
    </div>

    <div class="github">
        <a class="github-text" target="_blank" href="https://github.com/microsoft/RockPaperScissorsLizardSpock">Get the code from GitHub</a>
    </div>
</div>

@code
{
    [Parameter]
    public string Token { get; set; }

    public string RedirectUrl { get; set; }
    public string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RedirectUrl = $"/invite/{Token}";
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Game.Username = state.User?.Identity?.Name;
        Game.IsTwitterUser = state.User.Identity.AuthenticationType == TwitterDefaults.AuthenticationScheme;
        if (state.User.Identity.IsAuthenticated)
        {
            _ = JoinMatch();
        }
    }

    private async Task JoinMatch()
    {
        await Game.FetchMatchId(Token);
        NavigationManager.NavigateTo($"/battle/multiplayer/{Game.MatchId}");
    }
}